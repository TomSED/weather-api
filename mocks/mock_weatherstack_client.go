// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/TomSED/weather-api"
	"github.com/TomSED/weather-api/pkg/weatherstack"
	"sync"
)

var (
	lockWeatherStackClientMockGetWeather sync.RWMutex
)

// Ensure, that WeatherStackClientMock does implement weatherapi.WeatherStackClient.
// If this is not the case, regenerate this file with moq.
var _ weatherapi.WeatherStackClient = &WeatherStackClientMock{}

// WeatherStackClientMock is a mock implementation of weatherapi.WeatherStackClient.
//
//     func TestSomethingThatUsesWeatherStackClient(t *testing.T) {
//
//         // make and configure a mocked weatherapi.WeatherStackClient
//         mockedWeatherStackClient := &WeatherStackClientMock{
//             GetWeatherFunc: func(city string) (*weatherstack.APIResponse, error) {
// 	               panic("mock out the GetWeather method")
//             },
//         }
//
//         // use mockedWeatherStackClient in code that requires weatherapi.WeatherStackClient
//         // and then make assertions.
//
//     }
type WeatherStackClientMock struct {
	// GetWeatherFunc mocks the GetWeather method.
	GetWeatherFunc func(city string) (*weatherstack.APIResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetWeather holds details about calls to the GetWeather method.
		GetWeather []struct {
			// City is the city argument value.
			City string
		}
	}
}

// GetWeather calls GetWeatherFunc.
func (mock *WeatherStackClientMock) GetWeather(city string) (*weatherstack.APIResponse, error) {
	if mock.GetWeatherFunc == nil {
		panic("WeatherStackClientMock.GetWeatherFunc: method is nil but WeatherStackClient.GetWeather was just called")
	}
	callInfo := struct {
		City string
	}{
		City: city,
	}
	lockWeatherStackClientMockGetWeather.Lock()
	mock.calls.GetWeather = append(mock.calls.GetWeather, callInfo)
	lockWeatherStackClientMockGetWeather.Unlock()
	return mock.GetWeatherFunc(city)
}

// GetWeatherCalls gets all the calls that were made to GetWeather.
// Check the length with:
//     len(mockedWeatherStackClient.GetWeatherCalls())
func (mock *WeatherStackClientMock) GetWeatherCalls() []struct {
	City string
} {
	var calls []struct {
		City string
	}
	lockWeatherStackClientMockGetWeather.RLock()
	calls = mock.calls.GetWeather
	lockWeatherStackClientMockGetWeather.RUnlock()
	return calls
}
