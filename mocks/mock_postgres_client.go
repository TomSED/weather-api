// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/TomSED/weather-api"
	"github.com/TomSED/weather-api/pkg/postgres"
	"sync"
)

var (
	lockPostgresClientMockGetLatestWeatherData sync.RWMutex
	lockPostgresClientMockInsertWeatherData    sync.RWMutex
)

// Ensure, that PostgresClientMock does implement weatherapi.PostgresClient.
// If this is not the case, regenerate this file with moq.
var _ weatherapi.PostgresClient = &PostgresClientMock{}

// PostgresClientMock is a mock implementation of weatherapi.PostgresClient.
//
//     func TestSomethingThatUsesPostgresClient(t *testing.T) {
//
//         // make and configure a mocked weatherapi.PostgresClient
//         mockedPostgresClient := &PostgresClientMock{
//             GetLatestWeatherDataFunc: func(city string) (*postgres.WeatherData, error) {
// 	               panic("mock out the GetLatestWeatherData method")
//             },
//             InsertWeatherDataFunc: func(in1 *postgres.WeatherData) error {
// 	               panic("mock out the InsertWeatherData method")
//             },
//         }
//
//         // use mockedPostgresClient in code that requires weatherapi.PostgresClient
//         // and then make assertions.
//
//     }
type PostgresClientMock struct {
	// GetLatestWeatherDataFunc mocks the GetLatestWeatherData method.
	GetLatestWeatherDataFunc func(city string) (*postgres.WeatherData, error)

	// InsertWeatherDataFunc mocks the InsertWeatherData method.
	InsertWeatherDataFunc func(in1 *postgres.WeatherData) error

	// calls tracks calls to the methods.
	calls struct {
		// GetLatestWeatherData holds details about calls to the GetLatestWeatherData method.
		GetLatestWeatherData []struct {
			// City is the city argument value.
			City string
		}
		// InsertWeatherData holds details about calls to the InsertWeatherData method.
		InsertWeatherData []struct {
			// In1 is the in1 argument value.
			In1 *postgres.WeatherData
		}
	}
}

// GetLatestWeatherData calls GetLatestWeatherDataFunc.
func (mock *PostgresClientMock) GetLatestWeatherData(city string) (*postgres.WeatherData, error) {
	if mock.GetLatestWeatherDataFunc == nil {
		panic("PostgresClientMock.GetLatestWeatherDataFunc: method is nil but PostgresClient.GetLatestWeatherData was just called")
	}
	callInfo := struct {
		City string
	}{
		City: city,
	}
	lockPostgresClientMockGetLatestWeatherData.Lock()
	mock.calls.GetLatestWeatherData = append(mock.calls.GetLatestWeatherData, callInfo)
	lockPostgresClientMockGetLatestWeatherData.Unlock()
	return mock.GetLatestWeatherDataFunc(city)
}

// GetLatestWeatherDataCalls gets all the calls that were made to GetLatestWeatherData.
// Check the length with:
//     len(mockedPostgresClient.GetLatestWeatherDataCalls())
func (mock *PostgresClientMock) GetLatestWeatherDataCalls() []struct {
	City string
} {
	var calls []struct {
		City string
	}
	lockPostgresClientMockGetLatestWeatherData.RLock()
	calls = mock.calls.GetLatestWeatherData
	lockPostgresClientMockGetLatestWeatherData.RUnlock()
	return calls
}

// InsertWeatherData calls InsertWeatherDataFunc.
func (mock *PostgresClientMock) InsertWeatherData(in1 *postgres.WeatherData) error {
	if mock.InsertWeatherDataFunc == nil {
		panic("PostgresClientMock.InsertWeatherDataFunc: method is nil but PostgresClient.InsertWeatherData was just called")
	}
	callInfo := struct {
		In1 *postgres.WeatherData
	}{
		In1: in1,
	}
	lockPostgresClientMockInsertWeatherData.Lock()
	mock.calls.InsertWeatherData = append(mock.calls.InsertWeatherData, callInfo)
	lockPostgresClientMockInsertWeatherData.Unlock()
	return mock.InsertWeatherDataFunc(in1)
}

// InsertWeatherDataCalls gets all the calls that were made to InsertWeatherData.
// Check the length with:
//     len(mockedPostgresClient.InsertWeatherDataCalls())
func (mock *PostgresClientMock) InsertWeatherDataCalls() []struct {
	In1 *postgres.WeatherData
} {
	var calls []struct {
		In1 *postgres.WeatherData
	}
	lockPostgresClientMockInsertWeatherData.RLock()
	calls = mock.calls.InsertWeatherData
	lockPostgresClientMockInsertWeatherData.RUnlock()
	return calls
}
